{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { db } from \"../../store.js\";\n\nvar TurnBox = /*#__PURE__*/function (_Component) {\n  _inherits(TurnBox, _Component);\n\n  var _super = _createSuper(TurnBox);\n\n  function TurnBox(props) {\n    var _this;\n\n    _classCallCheck(this, TurnBox);\n\n    _this = _super.call(this, props);\n    _this.nextTurn = _this.nextTurn.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TurnBox, [{\n    key: \"nextTurn\",\n    value: function nextTurn() {\n      var _this2 = this;\n\n      if (this.props.gameStatus.nowTurnPlayer == this.props.gameStatus.you) {\n        if (this.props.yourStatus.yourVicPnt >= 10) {\n          db.doc(this.props.gameStatus.gameID).update({\n            finalLog: this.props.gameStatus.you + \"win!\"\n          });\n        } else {\n          var URL = './php/action/turnend_reset.php';\n          var localURL = 'http://localhost/wizard-contest3/php/action/turnend_reset.php';\n          axios.post(localURL, require('querystring').stringify({\n            gameId: this.props.gameStatus.gameID,\n            whom: this.props.gameStatus.you\n          })).then(function () {\n            var newLog = _this2.props.gameStatus.enemyName + \"のターン\";\n            db.doc(_this2.props.gameStatus.gameID).update({\n              finalLog: newLog,\n              nowturnplayer: _this2.props.gameStatus.enemy\n            });\n\n            _this2.props.dispatch({\n              type: \"TURNPASSED\"\n            });\n          })[\"catch\"](function (error) {});\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsx(\"div\", {\n        id: \"turnend_box\",\n        onClick: this.nextTurn,\n        children: this.props.otherInfo.turnendText\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var firstPlayer;\n      var firstText;\n\n      if (this.props.gameStatus.nowTurnPlayer == \"host\" && this.props.gameStatus.you == \"host\") {\n        firstPlayer = this.props.gameStatus.yourName;\n        firstText = \"ターンを終了する\";\n      } else if (this.props.gameStatus.nowTurnPlayer == \"host\" && this.props.gameStatus.you == \"guest\") {\n        firstPlayer = this.props.gameStatus.enemyName;\n        firstText = \"\";\n      } else if (this.props.gameStatus.nowTurnPlayer == \"guest\" && this.props.gameStatus.you == \"host\") {\n        firstPlayer = this.props.gameStatus.enemyName;\n        firstText = \"\";\n      } else if (this.props.gameStatus.nowTurnPlayer == \"guest\" && this.props.gameStatus.you == \"guest\") {\n        firstPlayer = this.props.gameStatus.yourName;\n        firstText = \"ターンを終了する\";\n      }\n\n      ;\n      this.props.dispatch({\n        type: \"FIRSTPLAYERSET\",\n        name: firstPlayer,\n        text: firstText\n      });\n    }\n  }]);\n\n  return TurnBox;\n}(Component);\n\nTurnBox = connect(function (state) {\n  return state;\n})(TurnBox);\nexport default TurnBox;","map":null,"metadata":{},"sourceType":"module"}