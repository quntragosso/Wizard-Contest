{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { setFirestore } from \"../components/functions.js\";\nimport { guestNameSet } from \"../components/functions.js\";\nimport { guestSetUpReport } from \"../components/functions.js\";\nimport { gameCreate } from \"../components/functions.js\";\nimport { deckCreate } from \"../components/functions.js\";\nimport GameScene from \"../components/Gamescene.js\";\nimport WaitScene from \"../components/Waitscene.js\";\nimport { db } from \"../store.js\"; // 戻り値がpromiseインスタンスのものがひもとけず戻り値を要求するfunctionの外部置きは断念。 \n\nvar Game = /*#__PURE__*/function (_Component) {\n  _inherits(Game, _Component);\n\n  var _super = _createSuper(Game);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      guestSetUpFinished: false\n    };\n    _this.entry = _this.entry.bind(_assertThisInitialized(_this));\n    return _this;\n  } // Game Componentではゲーム時のコンポーネント描画を行うが、\n  // それら最初のレンダリング前に、自身のinfoや対戦相手との共通infoを取得してから行うものとする。\n  // Game Componentレンダリング前にfirebaseからホスト・ゲスト情報を取得したり、必要情報のstate変更等行う。全体の初期管理。\n  // 全てのsetup完了後に、firestoreの継続監視がスタートする。\n\n\n  _createClass(Game, [{\n    key: \"entry\",\n    value: function () {\n      var _entry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var areYouGuest, serverID, getNowTurnPlayer, firstOrSecond, firstPlayer, stringID, guestWasUpdated, hostWasUpdated;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                areYouGuest = false;\n                _context3.next = 3;\n                return db.get().then(function (querySnapshot) {\n                  var datas = querySnapshot.docs.map(function (doc) {\n                    return doc.data();\n                  });\n                  datas.forEach(function (data) {\n                    if (data.guestname == \"unset\") {\n                      areYouGuest = true;\n                      serverID = data.serverID;\n                      getNowTurnPlayer = data.nowturnplayer;\n                    }\n                  });\n                });\n\n              case 3:\n                if (!(areYouGuest == false)) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                serverID = Math.floor(Math.random() * 1000000);\n                firstOrSecond = Math.floor(Math.random() * 2);\n\n                if (firstOrSecond == 0) {\n                  firstPlayer = \"host\";\n                } else {\n                  firstPlayer = \"guest\";\n                }\n\n                stringID = String(serverID);\n                _context3.next = 10;\n                return setFirestore(stringID, this.props.gameStatus.yourName, firstPlayer);\n\n              case 10:\n                _context3.next = 12;\n                return this.props.dispatch({\n                  type: \"YOUAREHOST\",\n                  gameId: stringID,\n                  nowTurnPlayer: firstPlayer\n                });\n\n              case 12:\n                guestWasUpdated = false;\n                db.doc(this.props.gameStatus.gameID).onSnapshot( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(doc) {\n                    var URL, localURL, _URL, _localURL;\n\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            if (!(guestWasUpdated == false)) {\n                              _context.next = 11;\n                              break;\n                            }\n\n                            if (!(doc.data().guestname != \"unset\")) {\n                              _context.next = 9;\n                              break;\n                            }\n\n                            guestWasUpdated = true;\n                            gameCreate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.yourName, doc.data().guestname);\n                            _context.next = 6;\n                            return deckCreate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.you);\n\n                          case 6:\n                            _this2.marketCreate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.you, _this2.props.market.marketTopArr, _this2.props.market.marketBottomArr);\n\n                            _this2.props.dispatch({\n                              type: \"GUESTUPDATE\",\n                              guestname: doc.data().guestname\n                            });\n\n                            _this2.draw(_this2.props.gameStatus.gameID, _this2.props.gameStatus.you, 4);\n\n                          case 9:\n                            _context.next = 12;\n                            break;\n\n                          case 11:\n                            if (doc.data().guestSetUpFinished == true && _this2.state.guestSetUpFinished == false) {\n                              _this2.setState(function (state) {\n                                return {\n                                  guestSetUpFinished: true\n                                };\n                              });\n                            } else if (doc.data().guestSetUpFinished == true && _this2.state.guestSetUpFinished == true) {\n                              if (isNaN(doc.data().finalLog) == false) {\n                                URL = './php/id_to_name.php';\n                                localURL = 'http://localhost/wizard-contest3/php/id_to_name.php';\n                                axios.post(URL, require('querystring').stringify({\n                                  id: doc.data().finalLog\n                                })).then(function (results) {\n                                  _this2.props.dispatch({\n                                    type: \"LOGUPDATE\",\n                                    pushLog: results.data + \"をプレイ。\"\n                                  });\n\n                                  _this2.allUpdate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.you, \"you\");\n\n                                  _this2.allUpdate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.enemy, \"enemy\");\n                                })[\"catch\"](function (error) {});\n                              } else if (doc.data().finalLog == \"hostwin!\") {\n                                _this2.props.dispatch({\n                                  type: \"YOUWIN\"\n                                });\n                              } else if (doc.data().finalLog == \"guestwin!\") {\n                                _this2.props.dispatch({\n                                  type: \"YOULOSE\"\n                                });\n                              } else {\n                                _this2.props.dispatch({\n                                  type: \"LOGUPDATE\",\n                                  pushLog: doc.data().finalLog\n                                });\n\n                                _this2.allUpdate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.you, \"you\");\n\n                                _this2.allUpdate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.enemy, \"enemy\");\n                              }\n\n                              ;\n\n                              if (doc.data().nowturnplayer != _this2.props.gameStatus.nowTurnPlayer && doc.data().nowturnplayer == _this2.props.gameStatus.you) {\n                                // architectの起動\n                                _URL = './php/action/turnstart_activate.php';\n                                _localURL = 'http://localhost/wizard-contest3/php/action/turnstart_activate.php';\n                                axios.post(_URL, require('querystring').stringify({\n                                  gameId: _this2.props.gameStatus.gameID,\n                                  whose: _this2.props.gameStatus.you\n                                })).then(function (results) {\n                                  _this2.props.dispatch({\n                                    type: \"TURNRECEIVED\"\n                                  });\n\n                                  _this2.allUpdate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.you, \"you\");\n\n                                  _this2.allUpdate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.enemy, \"enemy\");\n                                })[\"catch\"](function (error) {});\n                              }\n                            }\n\n                          case 12:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n                _context3.next = 20;\n                break;\n\n              case 16:\n                // 自分ゲスト用関数\n                guestNameSet(serverID, this.props.gameStatus.yourName);\n                this.props.dispatch({\n                  type: \"YOUAREGUEST\",\n                  gameId: serverID,\n                  nowTurnPlayer: getNowTurnPlayer\n                });\n                hostWasUpdated = false;\n                db.doc(this.props.gameStatus.gameID).onSnapshot( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(doc) {\n                    var URL, localURL, _URL2, _localURL2;\n\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            if (!(hostWasUpdated == false)) {\n                              _context2.next = 10;\n                              break;\n                            }\n\n                            if (!(doc.data().hostname != \"unset\")) {\n                              _context2.next = 8;\n                              break;\n                            }\n\n                            hostWasUpdated = true;\n                            deckCreate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.you);\n                            _context2.next = 6;\n                            return _this2.marketCreate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.you, _this2.props.market.marketTopArr, _this2.props.market.marketBottomArr);\n\n                          case 6:\n                            _this2.props.dispatch({\n                              type: \"HOSTUPDATE\",\n                              hostname: doc.data().hostname\n                            });\n\n                            _this2.draw(_this2.props.gameStatus.gameID, _this2.props.gameStatus.you, 4);\n\n                          case 8:\n                            _context2.next = 11;\n                            break;\n\n                          case 10:\n                            if (doc.data().guestSetUpFinished == true && _this2.state.guestSetUpFinished == false) {\n                              _this2.setState(function (state) {\n                                return {\n                                  guestSetUpFinished: true\n                                };\n                              });\n                            } else if (doc.data().guestSetUpFinished == true && _this2.state.guestSetUpFinished == true) {\n                              if (isNaN(doc.data().finalLog) == false) {\n                                URL = './php/id_to_name.php';\n                                localURL = 'http://localhost/wizard-contest3/php/id_to_name.php';\n                                axios.post(URL, require('querystring').stringify({\n                                  id: doc.data().finalLog\n                                })).then(function (results) {\n                                  _this2.props.dispatch({\n                                    type: \"LOGUPDATE\",\n                                    pushLog: results.data + \"をプレイ。\"\n                                  });\n\n                                  _this2.allUpdate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.you, \"you\");\n\n                                  _this2.allUpdate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.enemy, \"enemy\");\n                                })[\"catch\"](function (error) {});\n                              } else if (doc.data().finalLog == \"hostwin!\") {\n                                _this2.props.dispatch({\n                                  type: \"YOULOSE\"\n                                });\n                              } else if (doc.data().finalLog == \"guestwin!\") {\n                                _this2.props.dispatch({\n                                  type: \"YOUWIN\"\n                                });\n                              } else {\n                                _this2.props.dispatch({\n                                  type: \"LOGUPDATE\",\n                                  pushLog: doc.data().finalLog\n                                });\n\n                                _this2.allUpdate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.you, \"you\");\n\n                                _this2.allUpdate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.enemy, \"enemy\");\n                              }\n\n                              if (doc.data().nowturnplayer != _this2.props.gameStatus.nowTurnPlayer && doc.data().nowturnplayer == _this2.props.gameStatus.you) {\n                                // architectの起動\n                                _URL2 = './php/action/turnstart_activate.php';\n                                _localURL2 = 'http://localhost/wizard-contest3/php/action/turnstart_activate.php';\n                                axios.post(_URL2, require('querystring').stringify({\n                                  gameId: _this2.props.gameStatus.gameID,\n                                  whose: _this2.props.gameStatus.you\n                                })).then(function (results) {\n                                  _this2.props.dispatch({\n                                    type: \"TURNRECEIVED\"\n                                  });\n\n                                  _this2.allUpdate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.you, \"you\");\n\n                                  _this2.allUpdate(_this2.props.gameStatus.gameID, _this2.props.gameStatus.enemy, \"enemy\");\n                                })[\"catch\"](function (error) {});\n                              }\n                            }\n\n                          case 11:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function (_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n\n              case 20:\n                ;\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function entry() {\n        return _entry.apply(this, arguments);\n      }\n\n      return entry;\n    }() // marketの生成と取得。ゲストは取得のみ。\n\n  }, {\n    key: \"marketCreate\",\n    value: function marketCreate(gameId, isHost, originTopArr, originBottomArr) {\n      var _this3 = this;\n\n      if (originTopArr.length == 3) {\n        var URL = './php/setup/market_create.php';\n        var localURL = 'http://localhost/wizard-contest3/php/setup/market_create.php';\n        axios.post(URL, require('querystring').stringify({\n          gameId: gameId,\n          isHost: isHost\n        })).then(function (results) {\n          var newTopArr = originTopArr;\n          var newBottomArr = originBottomArr;\n\n          for (var i = 0; i < 5; i++) {\n            newTopArr.push({\n              id: results.data[i].id,\n              name: results.data[i].name\n            });\n          }\n\n          ;\n\n          for (var _i = 0; _i < 5; _i++) {\n            newBottomArr.push({\n              id: results.data[_i + 5].id,\n              name: results.data[_i + 5].name\n            });\n          }\n\n          ;\n          var action = {\n            type: \"MARKETCREATE\",\n            marketTop: newTopArr,\n            marketBottom: newBottomArr\n          };\n          return _this3.props.dispatch(action);\n        })[\"catch\"](function (error) {});\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(gameId, whoseDraw, times) {\n      var URL = './php/effect/draw.php';\n      var localURL = 'http://localhost/wizard-contest3/php/effect/draw.php';\n      axios.post(URL, require('querystring').stringify({\n        gameId: gameId,\n        whom: whoseDraw,\n        times: times\n      })).then(function () {\n        if (whoseDraw == \"guest\") {\n          guestSetUpReport(gameId);\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }, {\n    key: \"handUpdate\",\n    value: function handUpdate(gameId, whoseUpdate, youOrEnemy) {\n      var _this4 = this;\n\n      var URL = './php/update/hand_update.php';\n      var localURL = 'http://localhost/wizard-contest3/php/update/hand_update.php';\n      axios.post(URL, require('querystring').stringify({\n        gameId: gameId,\n        whoseHand: whoseUpdate\n      })).then(function (results) {\n        if (youOrEnemy == \"you\") {\n          return _this4.props.dispatch({\n            type: \"YOURHANDUPDATE\",\n            newHand: results.data\n          });\n        } else if (youOrEnemy == \"enemy\") {\n          return _this4.props.dispatch({\n            type: \"ENEMYHANDUPDATE\",\n            newHand: results.data.length\n          });\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }, {\n    key: \"archiUpdate\",\n    value: function archiUpdate(gameId, whoseUpdate, youOrEnemy) {\n      var _this5 = this;\n\n      var URL = './php/update/archi_update.php';\n      var localURL = 'http://localhost/wizard-contest3/php/update/archi_update.php';\n      axios.post(URL, require('querystring').stringify({\n        gameId: gameId,\n        whoseArchi: whoseUpdate\n      })).then(function (results) {\n        if (youOrEnemy == \"you\") {\n          return _this5.props.dispatch({\n            type: \"YOURARCHIUPDATE\",\n            newArchi: results.data\n          });\n        } else if (youOrEnemy == \"enemy\") {\n          return _this5.props.dispatch({\n            type: \"ENEMYARCHIUPDATE\",\n            newArchi: results.data\n          });\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }, {\n    key: \"infoUpdate\",\n    value: function infoUpdate(gameId, whoseUpdate, youOrEnemy) {\n      var _this6 = this;\n\n      var URL = './php/update/info_update.php';\n      var localURL = 'http://localhost/wizard-contest3/php/update/info_update.php';\n      axios.post(URL, require('querystring').stringify({\n        gameId: gameId,\n        whoseInfo: whoseUpdate\n      })).then(function (results) {\n        var result = results.data;\n\n        if (youOrEnemy == \"you\") {\n          return _this6.props.dispatch({\n            type: \"YOURINFOUPDATE\",\n            yourDeckNum: result.deck,\n            yourTrashNum: result.trash,\n            yourVicPnt: result.point,\n            yourMana: result.mana,\n            yourGold: result.gold\n          });\n        } else if (youOrEnemy == \"enemy\") {\n          return _this6.props.dispatch({\n            type: \"ENEMYINFOUPDATE\",\n            enemyDeckNum: result.deck,\n            enemyTrashNum: result.trash,\n            enemyVicPnt: result.point,\n            enemyMana: result.mana,\n            enemyGold: result.gold\n          });\n        }\n      })[\"catch\"](function (error) {});\n    }\n  }, {\n    key: \"allUpdate\",\n    value: function allUpdate(gameId, whoseUpdate, youOrEnemy) {\n      this.handUpdate(gameId, whoseUpdate, youOrEnemy);\n      this.archiUpdate(gameId, whoseUpdate, youOrEnemy);\n      this.infoUpdate(gameId, whoseUpdate, youOrEnemy);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // 必要情報が出揃った場合に表示のコンポーネントを切り替える。\n      var content;\n\n      if (this.state.guestSetUpFinished == true || this.props.market.marketTopArr.length == 8 || this.props.market.marketBottomArr.length == 8) {\n        content = /*#__PURE__*/_jsx(GameScene, {});\n      } else {\n        content = /*#__PURE__*/_jsx(WaitScene, {});\n      }\n\n      return /*#__PURE__*/_jsx(\"div\", {\n        children: content\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.entry();\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }]);\n\n  return Game;\n}(Component);\n\nGame = connect(function (state) {\n  return state;\n})(Game);\nexport default Game;","map":null,"metadata":{},"sourceType":"module"}