{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { setFirestore } from \"../components/functions.js\";\nimport { guestNameSet } from \"../components/functions.js\";\nimport { guestSetUpReport } from \"../components/functions.js\";\nimport { gameCreate } from \"../components/functions.js\";\nimport { deckCreate } from \"../components/functions.js\";\nimport GameScene from \"../components/Gamescene.js\";\nimport WaitScene from \"../components/Waitscene.js\";\nimport { db } from \"../store.js\"; // 戻り値がpromiseインスタンスのものがひもとけず戻り値を要求するfunctionの外部置きは断念。 \n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      guestSetUpFinished: false\n    };\n    this.entry = this.entry.bind(this);\n  } // Game Componentではゲーム時のコンポーネント描画を行うが、\n  // それら最初のレンダリング前に、自身のinfoや対戦相手との共通infoを取得してから行うものとする。\n  // Game Componentレンダリング前にfirebaseからホスト・ゲスト情報を取得したり、必要情報のstate変更等行う。全体の初期管理。\n  // 全てのsetup完了後に、firestoreの継続監視がスタートする。\n\n\n  async entry() {\n    let areYouGuest = false;\n    let serverID;\n    let getNowTurnPlayer;\n    await db.get().then(querySnapshot => {\n      const datas = querySnapshot.docs.map(doc => doc.data());\n      datas.forEach(function (data) {\n        if (data.guestname == \"unset\") {\n          areYouGuest = true;\n          serverID = data.serverID;\n          getNowTurnPlayer = data.nowturnplayer;\n        }\n      });\n    }); // 自分ホスト用関数\n\n    if (areYouGuest == false) {\n      serverID = Math.floor(Math.random() * 1000000);\n      const firstOrSecond = Math.floor(Math.random() * 2);\n      let firstPlayer;\n\n      if (firstOrSecond == 0) {\n        firstPlayer = \"host\";\n      } else {\n        firstPlayer = \"guest\";\n      }\n\n      const stringID = String(serverID);\n      await setFirestore(stringID, this.props.gameStatus.yourName, firstPlayer);\n      await this.props.dispatch({\n        type: \"YOUAREHOST\",\n        gameId: stringID,\n        nowTurnPlayer: firstPlayer\n      });\n      let guestWasUpdated = false;\n      db.doc(this.props.gameStatus.gameID).onSnapshot(async doc => {\n        if (guestWasUpdated == false) {\n          if (doc.data().guestname != \"unset\") {\n            guestWasUpdated = true;\n            gameCreate(this.props.gameStatus.gameID, this.props.gameStatus.yourName, doc.data().guestname);\n            await deckCreate(this.props.gameStatus.gameID, this.props.gameStatus.you);\n            this.marketCreate(this.props.gameStatus.gameID, this.props.gameStatus.you, this.props.market.marketTopArr, this.props.market.marketBottomArr);\n            this.props.dispatch({\n              type: \"GUESTUPDATE\",\n              guestname: doc.data().guestname\n            });\n            this.draw(this.props.gameStatus.gameID, this.props.gameStatus.you, 4);\n          }\n        } else if (doc.data().guestSetUpFinished == true && this.state.guestSetUpFinished == false) {\n          this.setState(state => ({\n            guestSetUpFinished: true\n          }));\n        } else if (doc.data().guestSetUpFinished == true && this.state.guestSetUpFinished == true) {\n          if (isNaN(doc.data().finalLog) == false) {\n            const URL = './php/id_to_name.php';\n            const localURL = 'http://localhost/wizard-contest3/php/id_to_name.php';\n            axios.post(URL, require('querystring').stringify({\n              id: doc.data().finalLog\n            })).then(results => {\n              this.props.dispatch({\n                type: \"LOGUPDATE\",\n                pushLog: results.data + \"をプレイ。\"\n              });\n              this.allUpdate(this.props.gameStatus.gameID, this.props.gameStatus.you, \"you\");\n              this.allUpdate(this.props.gameStatus.gameID, this.props.gameStatus.enemy, \"enemy\");\n            }).catch(error => {});\n          } else if (doc.data().finalLog == \"hostwin!\") {\n            this.props.dispatch({\n              type: \"YOUWIN\"\n            });\n          } else if (doc.data().finalLog == \"guestwin!\") {\n            this.props.dispatch({\n              type: \"YOULOSE\"\n            });\n          } else {\n            this.props.dispatch({\n              type: \"LOGUPDATE\",\n              pushLog: doc.data().finalLog\n            });\n            this.allUpdate(this.props.gameStatus.gameID, this.props.gameStatus.you, \"you\");\n            this.allUpdate(this.props.gameStatus.gameID, this.props.gameStatus.enemy, \"enemy\");\n          }\n\n          ;\n\n          if (doc.data().nowturnplayer != this.props.gameStatus.nowTurnPlayer && doc.data().nowturnplayer == this.props.gameStatus.you) {\n            // architectの起動\n            const URL = './php/action/activate.php';\n            const localURL = 'http://localhost/wizard-contest3/php/action/turnstart_activate.php';\n            axios.post(URL, require('querystring').stringify({\n              gameId: this.props.gameStatus.gameID,\n              whose: this.props.gameStatus.you\n            })).then(results => {\n              this.props.dispatch({\n                type: \"TURNRECEIVED\"\n              });\n              this.allUpdate(this.props.gameStatus.gameID, this.props.gameStatus.you, \"you\");\n              this.allUpdate(this.props.gameStatus.gameID, this.props.gameStatus.enemy, \"enemy\");\n            }).catch(error => {});\n          }\n        }\n      });\n    } else {\n      // 自分ゲスト用関数\n      guestNameSet(serverID, this.props.gameStatus.yourName);\n      this.props.dispatch({\n        type: \"YOUAREGUEST\",\n        gameId: serverID,\n        nowTurnPlayer: getNowTurnPlayer\n      });\n      let hostWasUpdated = false;\n      db.doc(this.props.gameStatus.gameID).onSnapshot(async doc => {\n        if (hostWasUpdated == false) {\n          if (doc.data().hostname != \"unset\") {\n            hostWasUpdated = true;\n            deckCreate(this.props.gameStatus.gameID, this.props.gameStatus.you);\n            await this.marketCreate(this.props.gameStatus.gameID, this.props.gameStatus.you, this.props.market.marketTopArr, this.props.market.marketBottomArr);\n            this.props.dispatch({\n              type: \"HOSTUPDATE\",\n              hostname: doc.data().hostname\n            });\n            this.draw(this.props.gameStatus.gameID, this.props.gameStatus.you, 4);\n          }\n        } else if (doc.data().guestSetUpFinished == true && this.state.guestSetUpFinished == false) {\n          this.setState(state => ({\n            guestSetUpFinished: true\n          }));\n        } else if (doc.data().guestSetUpFinished == true && this.state.guestSetUpFinished == true) {\n          if (isNaN(doc.data().finalLog) == false) {\n            const URL = './php/id_to_name.php';\n            const localURL = 'http://localhost/wizard-contest3/php/id_to_name.php';\n            axios.post(URL, require('querystring').stringify({\n              id: doc.data().finalLog\n            })).then(results => {\n              this.props.dispatch({\n                type: \"LOGUPDATE\",\n                pushLog: results.data + \"をプレイ。\"\n              });\n              this.allUpdate(this.props.gameStatus.gameID, this.props.gameStatus.you, \"you\");\n              this.allUpdate(this.props.gameStatus.gameID, this.props.gameStatus.enemy, \"enemy\");\n            }).catch(error => {});\n          } else if (doc.data().finalLog == \"hostwin!\") {\n            this.props.dispatch({\n              type: \"YOULOSE\"\n            });\n          } else if (doc.data().finalLog == \"guestwin!\") {\n            this.props.dispatch({\n              type: \"YOUWIN\"\n            });\n          } else {\n            this.props.dispatch({\n              type: \"LOGUPDATE\",\n              pushLog: doc.data().finalLog\n            });\n            this.allUpdate(this.props.gameStatus.gameID, this.props.gameStatus.you, \"you\");\n            this.allUpdate(this.props.gameStatus.gameID, this.props.gameStatus.enemy, \"enemy\");\n          }\n\n          if (doc.data().nowturnplayer != this.props.gameStatus.nowTurnPlayer && doc.data().nowturnplayer == this.props.gameStatus.you) {\n            // architectの起動\n            const URL = './php/action/activate.php';\n            const localURL = 'http://localhost/wizard-contest3/php/action/turnstart_activate.php';\n            axios.post(URL, require('querystring').stringify({\n              gameId: this.props.gameStatus.gameID,\n              whose: this.props.gameStatus.you\n            })).then(results => {\n              this.props.dispatch({\n                type: \"TURNRECEIVED\"\n              });\n              this.allUpdate(this.props.gameStatus.gameID, this.props.gameStatus.you, \"you\");\n              this.allUpdate(this.props.gameStatus.gameID, this.props.gameStatus.enemy, \"enemy\");\n            }).catch(error => {});\n          }\n        }\n      });\n    }\n\n    ;\n  } // marketの生成と取得。ゲストは取得のみ。\n\n\n  marketCreate(gameId, isHost, originTopArr, originBottomArr) {\n    if (originTopArr.length == 3) {\n      const URL = './php/setup/market_create.php';\n      const localURL = 'http://localhost/wizard-contest3/php/setup/market_create.php';\n      axios.post(URL, require('querystring').stringify({\n        gameId: gameId,\n        isHost: isHost\n      })).then(results => {\n        let newTopArr = originTopArr;\n        let newBottomArr = originBottomArr;\n\n        for (let i = 0; i < 5; i++) {\n          newTopArr.push({\n            id: results.data[i].id,\n            name: results.data[i].name\n          });\n        }\n\n        ;\n\n        for (let i = 0; i < 5; i++) {\n          newBottomArr.push({\n            id: results.data[i + 5].id,\n            name: results.data[i + 5].name\n          });\n        }\n\n        ;\n        const action = {\n          type: \"MARKETCREATE\",\n          marketTop: newTopArr,\n          marketBottom: newBottomArr\n        };\n        return this.props.dispatch(action);\n      }).catch(error => {});\n    }\n  }\n\n  draw(gameId, whoseDraw, times) {\n    const URL = './php/effect/draw.php';\n    const localURL = 'http://localhost/wizard-contest3/php/effect/draw.php';\n    axios.post(URL, require('querystring').stringify({\n      gameId: gameId,\n      whom: whoseDraw,\n      times: times\n    })).then(() => {\n      if (whoseDraw == \"guest\") {\n        guestSetUpReport(gameId);\n      }\n    }).catch(error => {});\n  }\n\n  handUpdate(gameId, whoseUpdate, youOrEnemy) {\n    const URL = './php/update/hand_update.php';\n    const localURL = 'http://localhost/wizard-contest3/php/update/hand_update.php';\n    axios.post(URL, require('querystring').stringify({\n      gameId: gameId,\n      whoseHand: whoseUpdate\n    })).then(results => {\n      if (youOrEnemy == \"you\") {\n        return this.props.dispatch({\n          type: \"YOURHANDUPDATE\",\n          newHand: results.data\n        });\n      } else if (youOrEnemy == \"enemy\") {\n        return this.props.dispatch({\n          type: \"ENEMYHANDUPDATE\",\n          newHand: results.data.length\n        });\n      }\n    }).catch(error => {});\n  }\n\n  archiUpdate(gameId, whoseUpdate, youOrEnemy) {\n    const URL = './php/update/archi_update.php';\n    const localURL = 'http://localhost/wizard-contest3/php/update/archi_update.php';\n    axios.post(URL, require('querystring').stringify({\n      gameId: gameId,\n      whoseArchi: whoseUpdate\n    })).then(results => {\n      if (youOrEnemy == \"you\") {\n        return this.props.dispatch({\n          type: \"YOURARCHIUPDATE\",\n          newArchi: results.data\n        });\n      } else if (youOrEnemy == \"enemy\") {\n        return this.props.dispatch({\n          type: \"ENEMYARCHIUPDATE\",\n          newArchi: results.data\n        });\n      }\n    }).catch(error => {});\n  }\n\n  infoUpdate(gameId, whoseUpdate, youOrEnemy) {\n    const URL = './php/update/info_update.php';\n    const localURL = 'http://localhost/wizard-contest3/php/update/info_update.php';\n    axios.post(URL, require('querystring').stringify({\n      gameId: gameId,\n      whoseInfo: whoseUpdate\n    })).then(results => {\n      const result = results.data;\n\n      if (youOrEnemy == \"you\") {\n        return this.props.dispatch({\n          type: \"YOURINFOUPDATE\",\n          yourDeckNum: result.deck,\n          yourTrashNum: result.trash,\n          yourVicPnt: result.point,\n          yourMana: result.mana,\n          yourGold: result.gold\n        });\n      } else if (youOrEnemy == \"enemy\") {\n        return this.props.dispatch({\n          type: \"ENEMYINFOUPDATE\",\n          enemyDeckNum: result.deck,\n          enemyTrashNum: result.trash,\n          enemyVicPnt: result.point,\n          enemyMana: result.mana,\n          enemyGold: result.gold\n        });\n      }\n    }).catch(error => {});\n  }\n\n  allUpdate(gameId, whoseUpdate, youOrEnemy) {\n    this.handUpdate(gameId, whoseUpdate, youOrEnemy);\n    this.archiUpdate(gameId, whoseUpdate, youOrEnemy);\n    this.infoUpdate(gameId, whoseUpdate, youOrEnemy);\n  }\n\n  render() {\n    // 必要情報が出揃った場合に表示のコンポーネントを切り替える。\n    let content;\n\n    if (this.state.guestSetUpFinished == true || this.props.market.marketTopArr.length == 8 || this.props.market.marketBottomArr.length == 8) {\n      content = /*#__PURE__*/_jsx(GameScene, {});\n    } else {\n      content = /*#__PURE__*/_jsx(WaitScene, {});\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: content\n    });\n  }\n\n  async componentDidMount() {\n    await this.entry();\n  }\n\n}\n\nGame = connect(state => state)(Game);\nexport default Game;","map":null,"metadata":{},"sourceType":"module"}